// Boas pr√°ticas: Encapsulamento, coment√°rios e organiza√ß√£o modular
// Este script manipula a tabela de servi√ßos, integra com Google Sheets e atualiza o resumo financeiro.
(function() {
  // Array para armazenar os parceiros
  let parceiros = [];
  
  // Configura√ß√µes OAuth2
  let accessToken = null;
  let userProfile = null;
  
  // Lista de emails autorizados com acesso completo
  const EMAILS_AUTORIZADOS = [
    'adm@cemaimobiliaria.com.br',
    'laiza@cemaimobiliaria.com.br',
    'veroni@cemaimobiliaria.com.br'
  ];
  
  // Fun√ß√£o para verificar se o email est√° autorizado
  function verificarEmailAutorizado(email) {
    if (!email) return false;
    return EMAILS_AUTORIZADOS.includes(email.toLowerCase());
  }
  
  // Fun√ß√£o para obter o Client ID baseado na autoriza√ß√£o do email
  function obterClientIdPorEmail(email) {
    const isAutorizado = verificarEmailAutorizado(email);
    
    if (isAutorizado) {
      // Para usu√°rios autorizados, usar o Client ID principal do config.js
      return CONFIG.GOOGLE_CLIENT_ID;
    } else {
      // Para usu√°rios n√£o autorizados, usar o Client ID secund√°rio do config.js
      return CONFIG.GOOGLE_CLIENT_ID_NAO_AUTORIZADO;
    }
  }
  
  // Fun√ß√£o para controlar acesso dos bot√µes baseado no email
  function controlarAcessoPorEmail(email) {
    const isAutorizado = verificarEmailAutorizado(email);
    
    // Bot√µes que devem ser desabilitados para usu√°rios n√£o autorizados
    const botoesParaDesabilitar = [
      'criarCopiaPlanilhaComLimpeza', // Criar Planilha autom√°tica
      'exportarRelatorioCompleto',    // Gerar Relat√≥rio
      'adicionarNovoServico',         // Adicionar Servi√ßo
      'removerServicoAdicionado'      // Remover
    ];
    
    botoesParaDesabilitar.forEach(selector => {
      const botoes = document.querySelectorAll(`[onclick*="${selector}"]`);
      botoes.forEach(botao => {
        if (!isAutorizado) {
          botao.disabled = true;
          botao.style.opacity = '0.5';
          botao.style.cursor = 'not-allowed';
          botao.title = 'Acesso restrito - Apenas emails autorizados';
        } else {
          botao.disabled = false;
          botao.style.opacity = '1';
          botao.style.cursor = 'pointer';
          botao.title = '';
        }
      });
    });
    
    // Controlar acesso ao link Google Cloud Console e se√ß√£o de desenvolvedores
    const googleCloudLinks = document.querySelectorAll('a[href*="console.cloud.google.com"]');
    googleCloudLinks.forEach(link => {
      if (!isAutorizado) {
        link.classList.add('disabled');
        link.title = 'Acesso restrito - Apenas emails autorizados';
        // Remover o href para evitar cliques
        link.removeAttribute('href');
        link.removeAttribute('target');
      } else {
        link.classList.remove('disabled');
        link.title = '';
        // Restaurar o href
        link.href = 'https://console.cloud.google.com';
        link.target = '_blank';
      }
    });
    
    // Controlar visibilidade da se√ß√£o "Para Desenvolvedores"
    const devSection = document.querySelector('.dev-section');
    if (devSection) {
      if (!isAutorizado) {
        devSection.style.display = 'none';
      } else {
        devSection.style.display = 'block';
      }
    }
    
    // Mostrar mensagem de status para usu√°rios n√£o autorizados
    if (!isAutorizado && email) {
      const clientId = obterClientIdPorEmail(email);
      mostrarStatus(`Acesso limitado para ${email}. Usando Client ID: ${clientId}`, "info");
    }
  }

  // Verificar se CONFIG est√° dispon√≠vel
  if (typeof CONFIG === 'undefined') {
    console.error('CONFIG n√£o est√° definido. Verifique se config.js foi carregado corretamente.');
    // Criar CONFIG padr√£o para evitar erros
    window.CONFIG = {
      GOOGLE_CLIENT_ID: '',
      GOOGLE_REDIRECT_URI: 'https://despachante.cemaimobiliaria.com.br/',
      GOOGLE_SCOPE: 'https://www.googleapis.com/auth/spreadsheets https://www.googleapis.com/auth/drive'
    };
  }

  // Configura√ß√£o do Google OAuth2
  const GOOGLE_OAUTH_CONFIG = {
    clientId: CONFIG.GOOGLE_CLIENT_ID,
    scope: CONFIG.GOOGLE_SCOPE,
    redirectUri: CONFIG.GOOGLE_REDIRECT_URI
  };
  
  const servicosValores = {
    "Registro com financiamento": 800.0,
    "Registro √† vista": 500.0,
    Averba√ß√£o: 300.0,
    "Guia de Laud√™mio do SPU": 100.0,
    "Laud√™mio da prefeitura": 700.0,
    "Laud√™mio das fam√≠lias": 700.0,
    "Laud√™mio do S√£o Bento": 700.0,
    "Laud√™mio da Igreja da Gl√≥ria": 700.0,
    "Laud√™mio da Mitra": 700.0,
    "Emiss√£o de guia de ITBI": 100.0,
    "Emiss√£o de certid√£o por nome": 100.0,
    "Transfer√™ncia de conta": 100.0,
  };

  // Fun√ß√£o para mostrar alertas de sucesso personalizados
  function mostrarAlertaSucesso(titulo, mensagem, detalhes = "") {
    const alertaCompleto = `üéâ ${titulo}\n\n${mensagem}${detalhes ? '\n\n' + detalhes : ''}\n\n‚úÖ Opera√ß√£o realizada com √™xito!`;
    mostrarAlertaCentralizado(alertaCompleto);
  }

  // Fun√ß√£o para mostrar status com alerta de sucesso
  function mostrarStatus(mensagem, tipo = "info") {
    // S√≥ mostrar alerta centralizado para erros de intera√ß√£o do usu√°rio
    if (tipo === "error") {
      mostrarAlertaCentralizado(mensagem);
      return;
    }

    // Adicionar alerta de sucesso para opera√ß√µes importantes
    if (tipo === "success") {
      // Mostrar alerta nativo do navegador
      setTimeout(() => {
        mostrarAlertaCentralizado(`‚úÖ Sucesso!\n\n${mensagem}`);
      }, 1000);
    }

  }

  // Fun√ß√µes OAuth2
  function iniciarLoginGmail() {
    const userEmailLogin = document.getElementById("userEmail").value.trim();
    const spreadsheetId = document.getElementById("spreadsheetId").value.trim();
    
    if (!userEmailLogin) {
      mostrarStatus("Por favor, insira seu e-mail Gmail", "error");
      return;
    }
    
    if (!spreadsheetId) {
      mostrarStatus("Por favor, insira o ID da planilha", "error");
      return;
    }
    
    // Validar formato do e-mail (aceita Gmail e Google Workspace)
    const emailRegex = /^[^\s@]+@(gmail\.com|googlemail\.com|[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})$/;
    if (!emailRegex.test(userEmailLogin)) {
      mostrarStatus("Por favor, insira um e-mail v√°lido (Gmail ou Google Workspace)", "error");
      return;
    }
    
    // Obter o Client ID apropriado baseado na autoriza√ß√£o do email
    const clientId = obterClientIdPorEmail(userEmailLogin);
    const isAutorizado = verificarEmailAutorizado(userEmailLogin);
    
    // Mostrar mensagem informativa sobre qual Client ID est√° sendo usado
    if (!isAutorizado) {
      mostrarStatus(`Usando Client ID para usu√°rios n√£o autorizados. Email: ${userEmailLogin}`, "info");
    } else {
      mostrarStatus(`Usando Client ID para usu√°rios autorizados. Email: ${userEmailLogin}`, "info");
    }
    
    const state = Math.random().toString(36).substring(2, 15);
    sessionStorage.setItem('oauth_state', state);
    sessionStorage.setItem('user_email', userEmailLogin);
    sessionStorage.setItem('client_id_used', clientId);
    
    const authUrl = new URL('https://accounts.google.com/o/oauth2/v2/auth');
    authUrl.searchParams.set('client_id', clientId);
    authUrl.searchParams.set('redirect_uri', GOOGLE_OAUTH_CONFIG.redirectUri);
    authUrl.searchParams.set('scope', GOOGLE_OAUTH_CONFIG.scope);
    authUrl.searchParams.set('response_type', 'token');
    authUrl.searchParams.set('state', state);
    authUrl.searchParams.set('prompt', 'consent');
    authUrl.searchParams.set('login_hint', userEmailLogin);
    
    // Redirecionar na mesma janela (mais confi√°vel que popup)
    window.location.href = authUrl.toString();
  }

  function processarCallbackOAuth2() {
    const hash = window.location.hash.substring(1);
    const params = new URLSearchParams(hash);
    
    const accessTokenParam = params.get('access_token');
    const stateParam = params.get('state');
    const errorParam = params.get('error');
    
    const savedState = sessionStorage.getItem('oauth_state');
    
    if (errorParam) {
      let errorMessage = `Erro na autentica√ß√£o: ${errorParam}`;
      
      // Mensagens espec√≠ficas para erros comuns
      if (errorParam === 'access_denied') {
        errorMessage = `Acesso negado. Verifique se:\n\n1. O e-mail est√° correto\n2. A credencial OAuth2 permite este e-mail (Gmail ou Google Workspace)\n3. Voc√™ autorizou o acesso na janela do Google`;
      } else if (errorParam === 'invalid_client') {
        const userEmail = sessionStorage.getItem('user_email');
        const isAutorizado = verificarEmailAutorizado(userEmail);
        
        if (isAutorizado) {
          errorMessage = `Erro de configura√ß√£o OAuth2!\n\nO Client ID n√£o est√° configurado corretamente.\n\nPara resolver:\n1. Acesse https://console.cloud.google.com\n2. Crie um projeto e ative a Google Sheets API\n3. Crie credenciais OAuth2 (Web application)\n4. Substitua o Client ID no arquivo script.js\n5. Adicione os URIs autorizados: ${window.location.origin}`;
        } else {
          errorMessage = `Erro de configura√ß√£o OAuth2!\n\nO Client ID n√£o est√° configurado corretamente.\n\nEntre em contato com o administrador do sistema para resolver este problema.`;
        }
      } else if (errorParam === 'unauthorized_client') {
        errorMessage = `Cliente n√£o autorizado. O e-mail n√£o tem permiss√£o para usar esta aplica√ß√£o.`;
      }
      
      mostrarStatus(errorMessage, "error");
      return;
    }
    
    if (stateParam !== savedState) {
      mostrarStatus("Erro de seguran√ßa na autentica√ß√£o", "error");
      return;
    }
    
    if (accessTokenParam) {
      accessToken = accessTokenParam;
      sessionStorage.setItem('oauth_access_token', accessToken);
      sessionStorage.removeItem('oauth_state');
      
      // Limpar hash da URL
      window.history.replaceState({}, document.title, window.location.pathname);
      
      // Obter informa√ß√µes do usu√°rio
      obterPerfilUsuario();
      
      const userEmailCallback = sessionStorage.getItem('user_email');
      const clientIdUsed = sessionStorage.getItem('client_id_used');
      
      // Mostrar mensagem sobre o Client ID usado
      if (clientIdUsed) {
        const isAutorizado = verificarEmailAutorizado(userEmailCallback);
        const tipoUsuario = isAutorizado ? 'autorizado' : 'n√£o autorizado';
        mostrarStatus(`Login realizado com sucesso usando Client ID para usu√°rios ${tipoUsuario}`, "success");
      }
      
      // Iniciar temporizador de expira√ß√£o do token (30 minutos)
      if (window._oauthExpireTimeout) clearTimeout(window._oauthExpireTimeout);
      window._oauthExpireTimeout = setTimeout(() => {
        fazerLogout();
        mostrarStatus("Sess√£o expirada. Fa√ßa login novamente.", "error");
      }, 30 * 60 * 1000); // 30 minutos
    }
  }

  async function obterPerfilUsuario() {
    try {
      const response = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
        headers: {
          'Authorization': `Bearer ${accessToken}`
        }
      });
      
      if (response.ok) {
        userProfile = await response.json();
        
        // Verificar se o e-mail logado corresponde ao e-mail inserido
        const userEmailInputVerificar = document.getElementById("userEmail");
        const expectedEmail = sessionStorage.getItem('user_email');
        
        if (userProfile.email && expectedEmail && userProfile.email.toLowerCase() !== expectedEmail.toLowerCase()) {
          mostrarStatus(`E-mail logado (${userProfile.email}) n√£o corresponde ao e-mail inserido (${expectedEmail})`, "error");
          fazerLogout();
          return;
        }
        
        atualizarInterfaceUsuario();
        
                  // Atualizar display do e-mail
          const userEmailDisplay0 = document.getElementById("userEmailDisplay");
          if (userEmailDisplay0) {
            userEmailDisplay0.textContent = userProfile.email || "";
          }
        
        // Controlar acesso baseado no email do usu√°rio
        controlarAcessoPorEmail(userProfile.email);
        
        salvarConfiguracoes();
      } else {        
        const userEmailFallback = sessionStorage.getItem('user_email');
        if (userEmailFallback) {
          userProfile = { email: userEmailFallback, name: 'Usu√°rio' };
          
          // Salvar e-mail no localStorage para persistir
          localStorage.setItem("cema_user_email", userEmailFallback);
          
          // Atualizar campo de e-mail na interface
          const emailInput = document.getElementById("userEmail");
          if (emailInput) {
            emailInput.value = userEmailFallback;
          }
          
          atualizarInterfaceUsuario();
          
          // Atualizar display do e-mail
          const userEmailDisplay1 = document.getElementById("userEmailDisplay");
          if (userEmailDisplay1) {
            userEmailDisplay1.textContent = userEmailFallback;
          }
          
          salvarConfiguracoes();
        } else {
          fazerLogout();
        }
      }
    } catch (error) {
      console.error('Erro ao obter perfil do usu√°rio:', error);
      // Erro de conex√£o - usar e-mail do sessionStorage como fallback
      const userEmailError = sessionStorage.getItem('user_email');
      if (userEmailError) {
        userProfile = { email: userEmailError, name: 'Usu√°rio' };
        
        // Salvar e-mail no localStorage para persistir
        localStorage.setItem("cema_user_email", userEmailError);
        
        // Atualizar campo de e-mail na interface
        const emailInput = document.getElementById("userEmail");
        if (emailInput) {
          emailInput.value = userEmailError;
        }
        
        atualizarInterfaceUsuario();
        
                  // Atualizar display do e-mail
          const userEmailDisplay2 = document.getElementById("userEmailDisplay");
          if (userEmailDisplay2) {
            userEmailDisplay2.textContent = userEmailError;
          }
        
        salvarConfiguracoes();
      } else {
        fazerLogout();
      }
    }
  }

  function atualizarInterfaceUsuario() {
    const loginButton = document.getElementById("loginButton");
    const logoutButton = document.getElementById("logoutButton");
    const userInfo = document.getElementById("userInfo");
    const userName = document.getElementById("userName");
    const userEmailElement = document.getElementById("userEmail");
    
    if (accessToken && userProfile) {
      loginButton.style.display = "none";
      if (logoutButton) logoutButton.style.display = "inline-block";
      if (userInfo) userInfo.style.display = "block";
      
      if (userName) userName.textContent = userProfile.name || "Usu√°rio";
      if (userEmailElement) userEmailElement.textContent = userProfile.email || "";
      
      // Manter o campo de e-mail como password quando logado
      const emailInput = document.getElementById("userEmail");
      if (emailInput) {
        emailInput.disabled = true;
        emailInput.style.backgroundColor = "#f8f9fa";
        // Garantir que o tipo seja password
        if (emailInput.type !== 'password') {
          emailInput.type = 'password';
        }
      }
      
      // Controlar acesso baseado no email do usu√°rio logado
      controlarAcessoPorEmail(userProfile.email);
    } else {
      loginButton.style.display = "inline-block";
      if (logoutButton) logoutButton.style.display = "none";
      if (userInfo) userInfo.style.display = "none";
      
      // Desabilitar links quando n√£o logado
      const googleCloudLinks = document.querySelectorAll('a[href*="console.cloud.google.com"]');
      googleCloudLinks.forEach(link => {
        link.classList.add('disabled');
        link.title = 'Fa√ßa login para acessar';
        link.removeAttribute('href');
        link.removeAttribute('target');
      });
      
      // Habilitar o campo de e-mail quando n√£o logado
      const emailInput = document.getElementById("userEmail");
      if (emailInput) {
        emailInput.disabled = false;
        emailInput.style.backgroundColor = "white";
        // Garantir que o tipo seja password
        if (emailInput.type !== 'password') {
          emailInput.type = 'password';
        }
      }
      
      // Controlar acesso baseado no email digitado (mesmo sem login)
      const emailDigitado = emailInput ? emailInput.value : '';
      controlarAcessoPorEmail(emailDigitado);
    }
  }

  function fazerLogout() {
    accessToken = null;
    userProfile = null;
    sessionStorage.removeItem('oauth_access_token');
    sessionStorage.removeItem('user_email');
    sessionStorage.removeItem('client_id_used');
    
    // N√ÉO limpar o campo de e-mail - manter o e-mail digitado pelo usu√°rio
    const emailInput = document.getElementById("userEmail");
    if (emailInput) {
      emailInput.disabled = false;
      emailInput.style.backgroundColor = "white";
    }
    
    atualizarInterfaceUsuario();
    
    // Reaplicar controle de acesso baseado no email digitado
    const emailDigitado = emailInput ? emailInput.value : '';
    controlarAcessoPorEmail(emailDigitado);
  }

  function verificarTokenSalvo() {
    const savedToken = sessionStorage.getItem('oauth_access_token');
    if (savedToken) {
      accessToken = savedToken;
      obterPerfilUsuario();
    } else {
      // Se n√£o h√° token salvo, aplicar controle de acesso baseado no email digitado
      const emailInput = document.getElementById("userEmail");
      if (emailInput && emailInput.value) {
        controlarAcessoPorEmail(emailInput.value);
      }
    }
  }

  // Fun√ß√µes para gerenciar parceiros
  function mostrarAlertaParceiro(msg) {
    mostrarAlertaCentralizado(msg);
  }

  // Atualizar fun√ß√£o adicionarParceiro para mostrar alerta se inv√°lido
  function adicionarParceiro() {
    const btnAdd = document.getElementById("btnAddPartner");
    
    const nome = document.getElementById("partnerName").value.trim();
    const percentual = parseFloat(document.getElementById("partnerPercentage").value);
    

    // Verificar se apenas um dos campos est√° preenchido
    if (nome && (isNaN(percentual) || percentual === "")) {
      mostrarAlertaParceiro("Por favor, preencha tamb√©m o percentual do parceiro");
      return;
    }

    if (!nome && !isNaN(percentual) && percentual > 0) {
      mostrarAlertaParceiro("Por favor, preencha tamb√©m o nome do parceiro");
      return;
    }

    // Verificar se ambos os campos est√£o vazios
    if (!nome && (isNaN(percentual) || percentual === "")) {
      mostrarAlertaParceiro("Por favor, preencha o nome e o percentual do parceiro");
      return;
    }

    // Verificar se o nome est√° vazio (caso espec√≠fico)
    if (!nome) {
      mostrarAlertaParceiro("Por favor, insira o nome do parceiro");
      return;
    }

    // Verificar se o percentual √© inv√°lido
    if (isNaN(percentual) || percentual <= 0 || percentual > 100) {
      mostrarAlertaParceiro("Por favor, insira um percentual v√°lido (0-100)");
      return;
    }

    // Verificar se o nome j√° existe
    if (parceiros.some(p => p.nome.toLowerCase() === nome.toLowerCase())) {
      mostrarAlertaParceiro("J√° existe um parceiro com este nome");
      return;
    }

    // Calcular percentual total atual
    const percentualTotal = parceiros.reduce((total, p) => total + p.percentual, 0) + percentual;

    // Adicionar parceiro
    parceiros.push({ nome, percentual });
    
    // Limpar campos
    document.getElementById("partnerName").value = "";
    document.getElementById("partnerPercentage").value = "";
    
    // Atualizar interface
    atualizarInterfaceParceiros();
    calcularValores();
    salvarParceiros();
    
    // Remover mensagem de sucesso da adi√ß√£o de parceiro
  }

  function removerParceiro(nome) {
    parceiros = parceiros.filter(p => p.nome !== nome);
    atualizarInterfaceParceiros();
    calcularValores();
    salvarParceiros();
    mostrarStatus(`Parceiro "${nome}" removido!`, "success");
  }

  function atualizarInterfaceParceiros() {
    const partnersList = document.getElementById("partnersList");
    
    if (!partnersList) {
      console.error("Elemento partnersList n√£o encontrado!");
      return;
    }
    
    partnersList.innerHTML = "";

    parceiros.forEach(parceiro => {
      const partnerItem = document.createElement("div");
      partnerItem.className = "partner-item";
      partnerItem.innerHTML = `
        <span class="partner-name">${parceiro.nome}</span>
        <span class="partner-percentage">${parceiro.percentual}%</span>
        <button class="remove-partner" onclick="removerParceiro('${parceiro.nome}')">√ó</button>
      `;
      partnersList.appendChild(partnerItem);
    });
  }

  function salvarParceiros() {
    localStorage.setItem("cema_parceiros", JSON.stringify(parceiros));
  }

  function carregarParceiros() {
    const parceirosSalvos = localStorage.getItem("cema_parceiros");
    
    if (parceirosSalvos) {
      parceiros = JSON.parse(parceirosSalvos);
      atualizarInterfaceParceiros();
    }
  }

  function adicionarLinha() {
    const tbody = document.getElementById("corpoTabela");
    
    if (!tbody) {
      return;
    }
    
    const novaLinha = document.createElement("tr");

    novaLinha.innerHTML = `
                <td><input type="date" onchange="calcularValores()"></td>
                <td><input type="text" placeholder="Nome do comprador" onchange="calcularValores()"></td>
                <td><input type="tel" placeholder="(00) 00000-0000" onchange="calcularValores()"></td>
                <td><input type="text" placeholder="Nome do vendedor" onchange="calcularValores()"></td>
                <td><input type="tel" placeholder="(00) 00000-0000" onchange="calcularValores()"></td>
                <td><input type="text" placeholder="Endere√ßo completo" onchange="calcularValores()"></td>
                <td>
                    <select onchange="atualizarValor(this); calcularValores()">
                        <option value="">Selecione o servi√ßo</option>
                    </select>
                </td>
                <td><input type="date" onchange="calcularValores()"></td>
                <td><input type="text" placeholder="RGI" onchange="calcularValores()"></td>
                <td><input type="text" placeholder="N√∫mero do protocolo" onchange="calcularValores()"></td>
                <td><input type="number" step="0.01" class="valor-field" placeholder="0,00" onchange="calcularValores()"></td>
                <td><input type="number" step="0.01" class="valor-field" placeholder="0,00" onchange="calcularValores()"></td>
                <td class="valor-field" style="background-color: #e8f5e8;">R$ 0,00</td>
                <td class="valor-field" style="background-color: #f0f8ff;">R$ 0,00</td>
                <td><input type="text" class="status-input" placeholder="Status"></td>
                <td class="acao"><button class="btn-remove" onclick="removerLinha(this)">Remover</button></td>
            `;

    tbody.appendChild(novaLinha);
    
    // Atualizar os selects para incluir todos os servi√ßos (padr√£o + personalizados)
    atualizarSelectsServicos();
  }

  function atualizarValor(selectElement) {
    const linha = selectElement.closest("tr");
    const inputValor = linha.querySelector('input[type="number"]');
    const servicoSelecionado = selectElement.value;

    if (servicoSelecionado && servicosValores[servicoSelecionado]) {
      inputValor.value = servicosValores[servicoSelecionado].toFixed(2);
    }
  }

  function removerLinha(botao) {
    const linha = botao.closest("tr");
    linha.remove();
    calcularValores();
  }

  function calcularValores() {
    const linhas = document.querySelectorAll("#corpoTabela tr");
    let totalFaturado = 0;
    let totalDespesas = 0;

    if (linhas.length === 0) {
      return;
    }

    linhas.forEach((linha) => {
      const inputValor = linha.querySelector('input[type="number"]');
      const inputDespesas = linha.querySelectorAll('input[type="number"]')[1];
      
      if (!inputValor || !inputDespesas) {
        return;
      }
      
      const valorCobrado = parseFloat(inputValor.value) || 0;
      const despesas = parseFloat(inputDespesas.value) || 0;

      totalFaturado += valorCobrado;
      totalDespesas += despesas;

      // C√°lculo dos percentuais
      const valorCema = valorCobrado * 0.65 - despesas;
      const valorParceiros = valorCobrado * 0.35 + despesas;

      // Atualizar as c√©lulas de valores calculados
      const valorFields = linha.querySelectorAll(".valor-field");
      if (valorFields.length >= 4) {
        valorFields[2].textContent = `R$ ${valorCema.toFixed(2)}`;
        valorFields[3].textContent = `R$ ${valorParceiros.toFixed(2)}`;
      }
    });

    // Atualizar resumo apenas se os elementos existirem
    const totalLiquido = totalFaturado - totalDespesas;
    const cemaBruto = totalFaturado * 0.65;
    const cemaLiquido = cemaBruto - totalDespesas;
    const parceirosBase = totalFaturado * 0.35;
    const parceirosTotal = parceirosBase + totalDespesas;

    const totalFaturadoElement = document.getElementById("totalFaturado");
    const totalDespesasElement = document.getElementById("totalDespesas");
    const totalLiquidoElement = document.getElementById("totalLiquido");
    const cemaBrutoElement = document.getElementById("cemaBruto");
    const cemaDespesasElement = document.getElementById("cemaDespesas");
    const cemaLiquidoElement = document.getElementById("cemaLiquido");

    if (totalFaturadoElement) totalFaturadoElement.textContent = `R$ ${totalFaturado.toFixed(2)}`;
    if (totalDespesasElement) totalDespesasElement.textContent = `R$ ${totalDespesas.toFixed(2)}`;
    if (totalLiquidoElement) totalLiquidoElement.textContent = `R$ ${totalLiquido.toFixed(2)}`;
    if (cemaBrutoElement) cemaBrutoElement.textContent = `R$ ${cemaBruto.toFixed(2)}`;
    if (cemaDespesasElement) cemaDespesasElement.textContent = `R$ ${totalDespesas.toFixed(2)}`;
    if (cemaLiquidoElement) cemaLiquidoElement.textContent = `R$ ${cemaLiquido.toFixed(2)}`;

    // Atualizar resumo dos parceiros
    atualizarResumoParceiros(totalFaturado, totalDespesas);
  }

  function atualizarResumoParceiros(totalFaturado, totalDespesas) {
    const partnersSummary = document.getElementById("partnersSummary");
    
    if (!partnersSummary) {
      console.error("Elemento partnersSummary n√£o encontrado!");
      return;
    }
    
    partnersSummary.innerHTML = "";

    if (parceiros.length === 0) {
      partnersSummary.innerHTML = `
        <div class="partner-summary-item">
          <span class="partner-summary-name">Sem parceiros cadastrados</span>
          <span class="partner-summary-value">R$ 0,00</span>
        </div>
      `;
      return;
    }

    // Calcular valores por parceiro
    const valorBaseParceiros = totalFaturado * 0.35;
    const despesasPorParceiro = totalDespesas / parceiros.length;

    parceiros.forEach(parceiro => {
      const valorBase = valorBaseParceiros * (parceiro.percentual / 35);
      const valorTotal = valorBase + despesasPorParceiro;

      const partnerItem = document.createElement("div");
      partnerItem.className = "partner-summary-item";
      partnerItem.innerHTML = `
        <span class="partner-summary-name">${parceiro.nome} (${parceiro.percentual}%)</span>
        <span class="partner-summary-value">R$ ${valorTotal.toFixed(2)}</span>
      `;
      partnersSummary.appendChild(partnerItem);
    });

    // Adicionar total dos parceiros
    const totalParceiros = valorBaseParceiros + totalDespesas;
    const totalItem = document.createElement("div");
    totalItem.className = "partner-summary-item";
    totalItem.style.borderTop = "2px solid #27ae60";
    totalItem.style.marginTop = "10px";
    totalItem.style.paddingTop = "10px";
    totalItem.innerHTML = `
      <span class="partner-summary-name"><strong>Total Parceiros</strong></span>
      <span class="partner-summary-value"><strong>R$ ${totalParceiros.toFixed(2)}</strong></span>
    `;
    partnersSummary.appendChild(totalItem);
  }

  async function enviarParaGoogleSheets() {
    // Verificar se o token foi carregado corretamente
    if (!accessToken) {
      const savedToken = sessionStorage.getItem('oauth_access_token');
      if (savedToken) {
        accessToken = savedToken;
      }
    }
    
    const spreadsheetId = document.getElementById("spreadsheetId").value;
    const mesAno = document.getElementById("mes").selectedOptions[0].text;
    const userEmailEnvio = document.getElementById("userEmail").value.trim();
    
    if (!accessToken) {
      mostrarAlertaCentralizado("Por favor, fa√ßa login com Gmail primeiro");
      return;
    }
    if (!spreadsheetId) {
      mostrarStatus("Por favor, configure o ID da planilha", "error");
      return;
    }
    if (!userEmailEnvio) {
      mostrarAlertaCentralizado("Por favor, preencha o e-mail Gmail antes de enviar.");
      return;
    }
    if (!parceiros || parceiros.length === 0) {
      mostrarAlertaCentralizado("Por favor, adicione pelo menos um parceiro antes de enviar.");
      return;
    }
    // Valida√ß√£o dos campos de parceiros
    for (const parceiro of parceiros) {
      if (!parceiro.nome || parceiro.nome.trim() === "" || parceiro.percentual === undefined || parceiro.percentual === null || parceiro.percentual === "" || isNaN(parceiro.percentual) || parceiro.percentual <= 0) {
        mostrarAlertaCentralizado("Preencha corretamente o nome e o percentual de todos os parceiros antes de enviar.");
        return;
      }
    }
    mostrarStatus("Enviando dados para Google Sheets...", "info");

    try {
      // Preparar os dados
      const dados = [];

      // Cabe√ßalho
      dados.push([
        "Data",
        "Cliente Comprador",
        "Tel. Comprador",
        "Cliente Vendedor",
        "Tel. Vendedor",
        "Endere√ßo Im√≥vel",
        "Tipo de Servi√ßo",
        "Previs√£o de Conclus√£o",
        "RGI",
        "Protocolo",
        "Valor Cobrado",
        "Despesas",
        "CEMA (65%)",
        "Parceiros (35%)",
        "Status",
        "Parceiros Configurados"
      ]);

      // Dados das linhas
      const linhas = document.querySelectorAll("#corpoTabela tr");
      linhas.forEach((linha) => {
        const inputs = linha.querySelectorAll("input, select");
        const valorCobrado = parseFloat(inputs[10].value) || 0;
        const despesas = parseFloat(inputs[11].value) || 0;
        const statusInput = linha.querySelector('.status-input');
        const status = statusInput ? statusInput.value : "";

        if (valorCobrado > 0) {
          const valorCema = valorCobrado * 0.65 - despesas;
          const valorParceiros = valorCobrado * 0.35 + despesas;

          dados.push([
            inputs[0].value, // Data
            inputs[1].value, // Comprador
            inputs[2].value, // Tel Comprador
            inputs[3].value, // Vendedor
            inputs[4].value, // Tel Vendedor
            inputs[5].value, // Endere√ßo
            inputs[6].value, // Servi√ßo
            inputs[7].value, // Previs√£o de Conclus√£o
            inputs[8].value, // RGI
            inputs[9].value, // Protocolo
            valorCobrado,
            despesas,
            valorCema,
            valorParceiros,
            status,
            parceiros.map(p => `${p.nome} (${p.percentual}%)`).join(", ") || "Nenhum"
          ]);
        }
      });

      // Criar ou atualizar a aba
      const sheetName = mesAno.replace(" ", "_");

      // Primeiro, tentar criar a aba
      try {
        await fetch(
          `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}:batchUpdate`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${accessToken}`
            },
            body: JSON.stringify({
              requests: [
                {
                  addSheet: {
                    properties: {
                      title: sheetName,
                    },
                  },
                },
              ],
            }),
          },
        );
      } catch (error) {
        // Aba j√° existe, continuar
      }

      // Enviar dados para a aba usando append (N√ÉO sobrescrever)
      // N√£o envie o cabe√ßalho, s√≥ os dados das linhas
      if (dados.length > 1) {
        const appendResponse = await fetch(
          `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetName}!A5:append?valueInputOption=RAW`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${accessToken}`
            },
            body: JSON.stringify({
              values: dados.slice(1), // s√≥ os dados, sem o cabe√ßalho
            }),
          }
        );

        if (appendResponse.ok) {
          mostrarStatus("Dados adicionados com sucesso ao Google Sheets!", "success");
      } else {
          const error = await appendResponse.json();
          mostrarStatus(`Erro ao adicionar dados: ${error.error.message}`, "error");
        }
      } else {
        mostrarAlertaCentralizado("Nenhum dado para enviar.");
      }
    } catch (error) {
      mostrarStatus(
        `Erro ao conectar com Google Sheets: ${error.message}`,
        "error",
      );
    }
  }

  async function carregarDadosGoogleSheets() {
    // Verificar se o token foi carregado corretamente
    if (!accessToken) {
      const savedToken = sessionStorage.getItem('oauth_access_token');
      if (savedToken) {
        accessToken = savedToken;
      }
    }
    
    const spreadsheetId = document.getElementById("spreadsheetId").value;
    const mesAno = document.getElementById("mes").selectedOptions[0].text;

    if (!accessToken) {
      mostrarStatus("Por favor, fa√ßa login com Gmail primeiro", "error");
      return;
    }

    if (!spreadsheetId) {
      mostrarStatus("Por favor, configure o ID da planilha", "error");
      return;
    }

    mostrarStatus("Carregando dados do Google Sheets...", "info");

    try {
      const sheetName = mesAno.replace(" ", "_");

      const response = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetName}!A1:O1000`,
        {
          headers: {
            "Authorization": `Bearer ${accessToken}`
          }
        }
      );

      if (response.ok) {
        const data = await response.json();

        if (data.values && data.values.length > 4) {
          // Limpar tabela atual
          document.getElementById("corpoTabela").innerHTML = "";

          // Pular cabe√ßalho (primeiras 4 linhas)
          const rows = data.values.slice(4);

          rows.forEach((row) => {
            if (row.length > 0 && row[0]) {
              // Se tem data
              const tbody = document.getElementById("corpoTabela");
              const novaLinha = document.createElement("tr");

              novaLinha.innerHTML = `
                                    <td><input type="date" value="${
                                      row[0] || ""
                                    }" onchange="calcularValores()"></td>
                                    <td><input type="text" value="${
                                      row[1] || ""
                                    }" onchange="calcularValores()"></td>
                                    <td><input type="tel" value="${
                                      row[2] || ""
                                    }" onchange="calcularValores()"></td>
                                    <td><input type="text" value="${
                                      row[3] || ""
                                    }" onchange="calcularValores()"></td>
                                    <td><input type="tel" value="${
                                      row[4] || ""
                                    }" onchange="calcularValores()"></td>
                                    <td><input type="text" value="${
                                      row[5] || ""
                                    }" onchange="calcularValores()"></td>
                                    <td>
                                        <select onchange="atualizarValor(this); calcularValores()">
                                            <option value="">Selecione o servi√ßo</option>
                                            <option value="Registro com financiamento" ${
                                              row[6] ===
                                              "Registro com financiamento"
                                                ? "selected"
                                                : ""
                                            }>Registro com financiamento</option>
                                            <option value="Registro √† vista" ${
                                              row[6] === "Registro √† vista"
                                                ? "selected"
                                                : ""
                                            }>Registro √† vista</option>
                                            <option value="Averba√ß√£o" ${
                                              row[6] === "Averba√ß√£o"
                                                ? "selected"
                                                : ""
                                            }>Averba√ß√£o</option>
                                            <option value="Guia de Laud√™mio do SPU" ${
                                              row[6] ===
                                              "Guia de Laud√™mio do SPU"
                                                ? "selected"
                                                : ""
                                            }>Guia de Laud√™mio do SPU</option>
                                            <option value="Laud√™mio da prefeitura" ${
                                              row[6] ===
                                              "Laud√™mio da prefeitura"
                                                ? "selected"
                                                : ""
                                            }>Laud√™mio da prefeitura</option>
                                            <option value="Laud√™mio das fam√≠lias" ${
                                              row[6] === "Laud√™mio das fam√≠lias"
                                                ? "selected"
                                                : ""
                                            }>Laud√™mio das fam√≠lias</option>
                                            <option value="Laud√™mio do S√£o Bento" ${
                                              row[6] === "Laud√™mio do S√£o Bento"
                                                ? "selected"
                                                : ""
                                            }>Laud√™mio do S√£o Bento</option>
                                            <option value="Laud√™mio da Igreja da Gl√≥ria" ${
                                              row[6] ===
                                              "Laud√™mio da Igreja da Gl√≥ria"
                                                ? "selected"
                                                : ""
                                            }>Laud√™mio da Igreja da Gl√≥ria</option>
                                            <option value="Laud√™mio da Mitra" ${
                                              row[6] === "Laud√™mio da Mitra"
                                                ? "selected"
                                                : ""
                                            }>Laud√™mio da Mitra</option>
                                            <option value="Emiss√£o de guia de ITBI" ${
                                              row[6] ===
                                              "Emiss√£o de guia de ITBI"
                                                ? "selected"
                                                : ""
                                            }>Emiss√£o de guia de ITBI</option>
                                            <option value="Emiss√£o de certid√£o por nome" ${
                                              row[6] ===
                                              "Emiss√£o de certid√£o por nome"
                                                ? "selected"
                                                : ""
                                            }>Emiss√£o de certid√£o por nome</option>
                                            <option value="Transfer√™ncia de conta" ${
                                              row[6] ===
                                              "Transfer√™ncia de conta"
                                                ? "selected"
                                                : ""
                                            }>Transfer√™ncia de conta</option>
                                        </select>
                                    </td>
                                    <td><input type="date" value="${
                                      row[7] || ""
                                    }" onchange="calcularValores()"></td>
                                    <td><input type="text" value="${
                                      row[8] || ""
                                    }" onchange="calcularValores()"></td>
                                    <td><input type="text" value="${
                                      row[9] || ""
                                    }" onchange="calcularValores()"></td>
                                    <td><input type="number" step="0.01" class="valor-field" value="${
                                      row[10] || ""
                                    }" onchange="calcularValores()"></td>
                                    <td><input type="number" step="0.01" class="valor-field" value="${
                                      row[11] || ""
                                    }" onchange="calcularValores()"></td>
                                    <td class="valor-field" style="background-color: #e8f5e8;">R$ 0,00</td>
                                    <td class="valor-field" style="background-color: #f0f8ff;">R$ 0,00</td>
                                    <td><input type="text" class="status-input" value="${
                                      row[14] || ""
                                    }" placeholder="Status"></td>
                                    <td class="acao"><button class="btn-remove" onclick="removerLinha(this)">Remover</button></td>
                                `;

              tbody.appendChild(novaLinha);
            }
          });

          calcularValores();
          mostrarStatus(
            "Dados carregados com sucesso do Google Sheets!",
            "success",
          );
        } else {
          mostrarAlertaCentralizado("A tabela est√° vazia. Nenhum registro encontrado para este m√™s.");
        }
      } else {
        const error = await response.json();
        if (error.error && error.error.message && error.error.message.includes('Unable to parse range')) {
          mostrarStatus("Planilha est√° vazia", "info");
        } else {
          if (error.error && error.error.message && error.error.message.includes('Requested entity was not found')) {
            mostrarAlertaCentralizado("A tabela est√° vazia. Nenhum registro encontrado para este m√™s.");
          } else {
            mostrarStatus(`Erro ao carregar dados: ${error.error.message}`, "error");
          }
        }
      }
    } catch (error) {
      mostrarStatus(
        `Erro ao conectar com Google Sheets: ${error.message}`,
        "error",
      );
    }
  }

  // Fun√ß√£o para criar a planilha automaticamente
  async function criarPlanilhaAutomatica() {
    // Verificar permiss√£o
    const emailInput = document.getElementById("userEmail");
    const userEmailCriar = emailInput ? emailInput.value : '';
    if (!verificarEmailAutorizado(userEmailCriar)) {
      mostrarAlertaCentralizado('Acesso restrito. Apenas emails autorizados podem criar planilhas.');
      return;
    }
    
    if (!accessToken) {
      mostrarStatus("Por favor, fa√ßa login com Gmail primeiro", "error");
      return;
    }

    mostrarStatus("Criando nova planilha...", "info");

    try {
      const response = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${accessToken}`
          },
          body: JSON.stringify({
            properties: {
              title: "CEMA Imobili√°ria - Controle Financeiro",
            },
            sheets: [
              {
                properties: {
                  title: "Configura√ß√£o",
                },
              },
            ],
          }),
        },
      );

      if (response.ok) {
        const data = await response.json();
        document.getElementById("spreadsheetId").value = data.spreadsheetId;
        salvarConfiguracoes();

        // Criar cabe√ßalho na aba de configura√ß√£o
        const configData = [
          ["CEMA IMOBILI√ÅRIA - CONTROLE FINANCEIRO"],
          [""],
          ["Esta planilha foi criada automaticamente pelo sistema."],
          ["Cada m√™s ser√° criado em uma aba separada."],
          [""],
          ["Link da planilha:", data.spreadsheetUrl],
        ];

        await fetch(
          `https://sheets.googleapis.com/v4/spreadsheets/${data.spreadsheetId}/values/Configura√ß√£o!A1?valueInputOption=RAW`,
          {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${accessToken}`
            },
            body: JSON.stringify({
              values: configData,
            }),
          },
        );

        const mensagemSucesso = `Planilha criada com sucesso!\n\nID da Planilha: ${data.spreadsheetId}\nT√≠tulo: CEMA Imobili√°ria - Controle Financeiro\nLink: ${data.spreadsheetUrl}\n\nA planilha foi configurada automaticamente!`;
        mostrarStatus(mensagemSucesso, "success");
      } else {
        const error = await response.json();
        mostrarStatus(`Erro ao criar planilha: ${error.error.message}`, "error");
      }
    } catch (error) {
      mostrarStatus(`Erro ao criar planilha: ${error.message}`, "error");
    }
  }

  async function criarCopiaPlanilhaComLimpeza() {
    // Verificar permiss√£o
    const emailInput = document.getElementById("userEmail");
    const userEmailCopia = emailInput ? emailInput.value : '';
    if (!verificarEmailAutorizado(userEmailCopia)) {
      mostrarAlertaCentralizado('Acesso restrito. Apenas emails autorizados podem criar c√≥pias de planilhas.');
      return;
    }
    
    const spreadsheetId = document.getElementById("spreadsheetId").value;
    if (!spreadsheetId) {
      mostrarAlertaCentralizado("Por favor, informe o ID da planilha modelo");
      return;
    }

    if (!accessToken) {
      mostrarStatus("Por favor, fa√ßa login com Gmail primeiro", "error");
      return;
    }

    mostrarAlertaCentralizado("Criando c√≥pia exata da planilha usando Google Drive API...");
    
    try {
      // 1. Copiar a planilha usando Google Drive API (copia EXATA com todas as f√≥rmulas e formata√ß√£o)
      const copyResponse = await fetch(
        `https://www.googleapis.com/drive/v3/files/${spreadsheetId}/copy`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${accessToken}`
          },
          body: JSON.stringify({
            name: "CEMA Imobili√°ria - Controle Financeiro (C√≥pia)",
            parents: [] // Copiar para a raiz do Drive
          })
        }
      );

      if (!copyResponse.ok) {
        const error = await copyResponse.json();
        mostrarAlertaCentralizado("Erro ao copiar planilha: " + (error.error && error.error.message ? error.error.message : ""));
        return;
      }

      const copiedFile = await copyResponse.json();
      const newSpreadsheetId = copiedFile.id;

      // 2. Limpar linhas a partir da linha 5 nas abas de janeiro a dezembro
      const clearRequests = [];
      const meses = ['janeiro', 'fevereiro', 'mar√ßo', 'abril', 'maio', 'junho', 
                     'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'];
      
      // Obter as abas da planilha copiada para encontrar os IDs das abas dos meses
      const spreadsheetResponse = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${newSpreadsheetId}`,
        {
          headers: { "Authorization": `Bearer ${accessToken}` }
        }
      );
      
      if (spreadsheetResponse.ok) {
        const spreadsheetData = await spreadsheetResponse.json();
        
        spreadsheetData.sheets.forEach(sheet => {
          const sheetTitle = sheet.properties.title.toLowerCase();
          if (meses.includes(sheetTitle)) {
            clearRequests.push({
              updateCells: {
                range: {
                  sheetId: sheet.properties.sheetId,
                  startRowIndex: 4, // Linha 5 (√≠ndice 4)
                  endRowIndex: 1000, // Limpar at√© linha 1000
                  startColumnIndex: 0,
                  endColumnIndex: 26 // Coluna Z
                },
                fields: "userEnteredValue"
              }
            });
          }
        });
      }

      // 3. Aplicar a limpeza das linhas
      if (clearRequests.length > 0) {
        const clearResponse = await fetch(
          `https://sheets.googleapis.com/v4/spreadsheets/${newSpreadsheetId}:batchUpdate`,
          {
            method: "POST",
            headers: {
              "Authorization": `Bearer ${accessToken}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({ requests: clearRequests })
          }
        );

        if (!clearResponse.ok) {
          const error = await clearResponse.json();
          console.warn("Aviso: N√£o foi poss√≠vel limpar algumas linhas: " + (error.error && error.error.message ? error.error.message : ""));
        }
      }

      // 4. Atualizar o ID da planilha no campo
      document.getElementById("spreadsheetId").value = newSpreadsheetId;
      salvarConfiguracoes();

      mostrarAlertaCentralizado(
        `Planilha copiada com sucesso!<br><a href="https://docs.google.com/spreadsheets/d/${newSpreadsheetId}" target="_blank">Abrir nova planilha</a>`
      );

    } catch (error) {
      mostrarAlertaCentralizado("Erro ao criar c√≥pia: " + error.message);
    }
  }

  // Fun√ß√£o auxiliar para criar a c√≥pia usando o token tempor√°rio


  // Fun√ß√£o para salvar configura√ß√µes no localStorage
  function salvarConfiguracoes() {
    const userEmailSalvar = document.getElementById("userEmail").value;
    const spreadsheetId = document.getElementById("spreadsheetId").value;
    
    localStorage.setItem("cema_user_email", userEmailSalvar);
    localStorage.setItem("cema_spreadsheet_id", spreadsheetId);
  }

  // Fun√ß√£o para carregar configura√ß√µes do localStorage
  function carregarConfiguracoes() {
    const userEmailCarregar = localStorage.getItem("cema_user_email");
    const spreadsheetId = localStorage.getItem("cema_spreadsheet_id");
    
    if (userEmailCarregar) {
      const emailInput = document.getElementById("userEmail");
      if (emailInput) {
        emailInput.value = userEmailCarregar;
        // Aplicar controle de acesso baseado no email carregado
        controlarAcessoPorEmail(userEmailCarregar);
      }
    }
    
    if (spreadsheetId) {
      const spreadsheetInput = document.getElementById("spreadsheetId");
      if (spreadsheetInput) {
        spreadsheetInput.value = spreadsheetId;
      }
    }
  }

  // Event listeners para salvar configura√ß√µes
  const userEmailElementConfig = document.getElementById("userEmail");
  const spreadsheetIdElement = document.getElementById("spreadsheetId");
  if (userEmailElementConfig) {
    userEmailElementConfig.addEventListener("change", salvarConfiguracoes);
  }
  if (spreadsheetIdElement) {
    spreadsheetIdElement.addEventListener("change", salvarConfiguracoes);
  }

  // Salvar parceiros quando modificados
  function salvarParceirosAposModificacao() {
    salvarParceiros();
  }

  // Fun√ß√£o para formatar data brasileira
  function formatarDataBrasileira(data) {
    if (!data) return "";
    const [ano, mes, dia] = data.split("-");
    return `${dia}/${mes}/${ano}`;
  }

  // Fun√ß√£o para converter data brasileira para formato ISO
  function converterDataParaISO(data) {
    if (!data) return "";
    const [dia, mes, ano] = data.split("/");
    return `${ano}-${mes}-${dia}`;
  }

  // Fun√ß√£o para exportar relat√≥rio completo
  async function exportarRelatorioCompleto() {
    // Verificar permiss√£o
    const emailInput = document.getElementById("userEmail");
    const userEmailRelatorio = emailInput ? emailInput.value : '';
    if (!verificarEmailAutorizado(userEmailRelatorio)) {
      mostrarAlertaCentralizado('Acesso restrito. Apenas emails autorizados podem gerar relat√≥rios.');
      return;
    }
    
    // Verificar se o token foi carregado corretamente
    if (!accessToken) {
      const savedToken = sessionStorage.getItem('oauth_access_token');
      if (savedToken) {
        accessToken = savedToken;
      }
    }
    
    const spreadsheetId = document.getElementById("spreadsheetId").value;

    if (!accessToken) {
      mostrarAlertaCentralizado("Por favor, fa√ßa login com Gmail primeiro");
      return;
    }
    if (!spreadsheetId) {
      mostrarAlertaCentralizado("Por favor, informe o ID da planilha");
      return;
    }
    if (!userEmailRelatorio) {
      mostrarAlertaCentralizado("Por favor, preencha o e-mail Gmail antes de gerar o relat√≥rio.");
      return;
    }

    mostrarStatus("Gerando relat√≥rio completo...", "info");

    try {
      // Criar aba de relat√≥rio
      const relatorioData = [];

      // Cabe√ßalho do relat√≥rio
      relatorioData.push(["CEMA IMOBILI√ÅRIA - RELAT√ìRIO ANUAL"]);
      relatorioData.push(["Gerado em:", new Date().toLocaleDateString("pt-BR")]);
      relatorioData.push([]);

      // Resumo por m√™s
      relatorioData.push(["RESUMO POR M√äS"]);
      relatorioData.push([
        "M√™s",
        "Total Faturado",
        "Total Despesas",
        "L√≠quido",
        "CEMA",
        "Felipe",
      ]);

      // Tabela de servi√ßos
      relatorioData.push([]);
      relatorioData.push(["TABELA DE SERVI√áOS"]);
      relatorioData.push(["Servi√ßo", "Valor"]);

      Object.entries(servicosValores).forEach(([servico, valor]) => {
        relatorioData.push([servico, valor]);
      });

      // Criar/atualizar aba de relat√≥rio
      const sheetName = "Relat√≥rio_Anual";

      try {
        await fetch(
          `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}:batchUpdate`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${accessToken}`
            },
            body: JSON.stringify({
              requests: [
                {
                  addSheet: {
                    properties: {
                      title: sheetName,
                    },
                  },
                },
              ],
            }),
          },
        );
      } catch (error) {
        // Aba j√° existe
      }

      // Limpar e adicionar dados
      await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetName}!A1:clear`,
        {
          method: "POST",
          headers: {
            "Authorization": `Bearer ${accessToken}`
          }
        },
      );

      const response = await fetch(
        `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${sheetName}!A1?valueInputOption=RAW`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${accessToken}`
          },
          body: JSON.stringify({
            values: relatorioData,
          }),
        },
      );

      if (response.ok) {
        const mensagemSucesso = `Relat√≥rio completo gerado com sucesso!\n\nPlanilha: ${spreadsheetId}\nAba: Relat√≥rio_Anual\nData: ${new Date().toLocaleDateString("pt-BR")}\n\nO relat√≥rio est√° dispon√≠vel na planilha!`;
        mostrarStatus(mensagemSucesso, "success");
        // Abrir a planilha em nova aba
        window.open(`https://docs.google.com/spreadsheets/d/${spreadsheetId}`, '_blank');
      } else {
        throw new Error("Erro ao gerar relat√≥rio");
      }
    } catch (error) {
      mostrarStatus(`Erro ao gerar relat√≥rio: ${error.message}`, "error");
    }
  }

  // Valida√ß√£o dos campos de parceiro
  function validarCamposParceiro() {
    const nomeInput = document.getElementById("partnerName");
    const percentualInput = document.getElementById("partnerPercentage");
    const btnAdd = document.getElementById("btnAddPartner");
    const nomeFeedback = document.getElementById("partnerNameFeedback");
    const percentualFeedback = document.getElementById("partnerPercentageFeedback");

    let nome = nomeInput.value.trim();
    let percentual = percentualInput.value.trim();
    let percentualNum = parseFloat(percentual);
    let nomeValido = nome.length > 0;
    let percentualValido = percentual.length > 0 && !isNaN(percentualNum) && percentualNum > 0 && percentualNum <= 100;

    // Reset classes e feedback
    nomeInput.classList.remove("is-invalid", "is-valid");
    percentualInput.classList.remove("is-invalid", "is-valid");
    nomeFeedback.style.display = "none";
    percentualFeedback.style.display = "none";

    // Valida√ß√£o visual estilo Bootstrap
    if (!nomeValido && nome.length > 0) {
      nomeInput.classList.add("is-invalid");
      nomeFeedback.style.display = "block";
    } else if (nomeValido) {
      nomeInput.classList.add("is-valid");
    }
    if (!percentualValido && percentual.length > 0) {
      percentualInput.classList.add("is-invalid");
      percentualFeedback.style.display = "block";
    } else if (percentualValido) {
      percentualInput.classList.add("is-valid");
    }

    // N√£o desabilitar o bot√£o - deixar a fun√ß√£o adicionarParceiro mostrar os alertas
    btnAdd.disabled = false;
    return nomeValido && percentualValido;
  }

  // Fun√ß√£o para mostrar alerta centralizado na tela
  function mostrarAlertaCentralizado(msg) {
    let alerta = document.getElementById('centeredAlert');
    if (!alerta) {
      alerta = document.createElement('div');
      alerta.id = 'centeredAlert';
      alerta.className = 'centered-alert';
      document.body.appendChild(alerta);
    }
    alerta.textContent = msg;
    alerta.style.display = 'block';
    // Esconde ap√≥s 3 segundos
    clearTimeout(window._centeredAlertTimeout);
    window._centeredAlertTimeout = setTimeout(() => {
      alerta.style.display = 'none';
    }, 3000);
  }

  // Fun√ß√£o para adicionar novo servi√ßo personalizado
  function adicionarNovoServico() {
    // Verificar permiss√£o
    const emailInput = document.getElementById("userEmail");
    const userEmailAdicionar = emailInput ? emailInput.value : '';
    if (!verificarEmailAutorizado(userEmailAdicionar)) {
      mostrarAlertaCentralizado('Acesso restrito. Apenas emails autorizados podem adicionar novos servi√ßos.');
      return;
    }
    
    const nomeInput = document.getElementById('novoServicoNome');
    const valorInput = document.getElementById('novoServicoValor');
    const nome = nomeInput.value.trim();
    const valor = parseFloat(valorInput.value);
    if (!nome) {
      mostrarAlertaCentralizado('Preencha o nome do novo servi√ßo.');
      return;
    }
    if (isNaN(valor) || valor <= 0) {
      mostrarAlertaCentralizado('Preencha um valor v√°lido para o novo servi√ßo.');
      return;
    }
    if (servicosValores[nome]) {
      mostrarAlertaCentralizado('J√° existe um servi√ßo com esse nome.');
      return;
    }
    // Adicionar ao objeto de valores
    servicosValores[nome] = valor;
    // Adicionar visualmente
    const grid = document.getElementById('servicesGrid');
    const div = document.createElement('div');
    div.className = 'service-item';
    div.innerHTML = `<span>${nome}</span><input type="number" class="service-value-input" data-nome="${nome}" value="${valor}" min="0" step="0.01" style="width: 90px; margin-left: 8px;">`;
    grid.appendChild(div);
    // Limpar campos
    nomeInput.value = '';
    valorInput.value = '';
    // Atualizar selects de servi√ßo nas linhas da tabela
    atualizarSelectsServicos();
    ativarListenersValoresServicos();
  }

  // Fun√ß√£o para remover servi√ßos adicionados
  function removerServicoAdicionado() {
    // Verificar permiss√£o
    const emailInput = document.getElementById("userEmail");
    const userEmailRemover = emailInput ? emailInput.value : '';
    if (!verificarEmailAutorizado(userEmailRemover)) {
      mostrarAlertaCentralizado('Acesso restrito. Apenas emails autorizados podem remover servi√ßos.');
      return;
    }
    
    const nomeInput = document.getElementById('novoServicoNome');
    const nome = nomeInput.value.trim();
    
    if (!nome) {
      mostrarAlertaCentralizado('Digite o nome do servi√ßo que deseja remover.');
      return;
    }
    
    // Verificar se √© um servi√ßo padr√£o (n√£o pode ser removido)
    const servicosPadrao = [
      "Registro com financiamento", "Registro √† vista", "Averba√ß√£o", 
      "Guia de Laud√™mio do SPU", "Laud√™mio da prefeitura", "Laud√™mio das fam√≠lias",
      "Laud√™mio do S√£o Bento", "Laud√™mio da Igreja da Gl√≥ria", "Laud√™mio da Mitra",
      "Emiss√£o de guia de ITBI", "Emiss√£o de certid√£o por nome", "Transfer√™ncia de conta"
    ];
    
    if (servicosPadrao.includes(nome)) {
      mostrarAlertaCentralizado('N√£o √© poss√≠vel remover servi√ßos padr√£o do sistema.');
      return;
    }
    
    if (!servicosValores[nome]) {
      mostrarAlertaCentralizado('Servi√ßo n√£o encontrado.');
      return;
    }
    
    // Remover do objeto
    delete servicosValores[nome];
    
    // Remover visualmente
    const grid = document.getElementById('servicesGrid');
    const serviceItems = grid.querySelectorAll('.service-item');
    serviceItems.forEach(item => {
      const span = item.querySelector('span');
      if (span && span.textContent === nome) {
        item.remove();
      }
    });
    
    // Limpar campos
    nomeInput.value = '';
    document.getElementById('novoServicoValor').value = '';
    
    // Atualizar selects de servi√ßo nas linhas da tabela
    atualizarSelectsServicos();
    ativarListenersValoresServicos();
    
    mostrarAlertaCentralizado(`Servi√ßo "${nome}" removido com sucesso!`);
  }

  // Atualizar selects de servi√ßo nas linhas da tabela
  function atualizarSelectsServicos() {
    const selects = document.querySelectorAll('#corpoTabela select');
    selects.forEach(select => {
      const valorAtual = select.value;
      // Limpar op√ß√µes
      select.innerHTML = '<option value="">Selecione o servi√ßo</option>';
      Object.keys(servicosValores).forEach(nome => {
        const opt = document.createElement('option');
        opt.value = nome;
        opt.textContent = nome;
        if (nome === valorAtual) opt.selected = true;
        select.appendChild(opt);
      });
    });
  }

  // Fun√ß√£o para ativar listeners nos inputs de valor dos servi√ßos
  function ativarListenersValoresServicos() {
    document.querySelectorAll('.service-value-input').forEach(input => {
      input.addEventListener('input', function() {
        const nome = input.getAttribute('data-nome');
        const valor = parseFloat(input.value);
        if (nome && !isNaN(valor) && valor > 0) {
          servicosValores[nome] = valor;
          atualizarSelectsServicos();
        }
      });
    });
  }

  function limparTabelaServicos() {
    const corpoTabela = document.getElementById("corpoTabela");
    if (corpoTabela) {
      corpoTabela.innerHTML = "";
      adicionarLinha(); // Isso j√° chama atualizarSelectsServicos()
      calcularValores(); // Atualiza o resumo ap√≥s limpar
      mostrarAlertaCentralizado("Tabela limpa! Pronto para nova inser√ß√£o.");
    }
  }

  // Inicializa√ß√£o
  document.addEventListener("DOMContentLoaded", function () {
    // Verificar se h√° um callback OAuth2 na URL
    if (window.location.hash && window.location.hash.includes('access_token')) {
      processarCallbackOAuth2();
    }
    
    // Carregar valores salvos antes de qualquer manipula√ß√£o
    carregarConfiguracoes();
    // Adicionar listeners ap√≥s restaurar valores
    const userEmailInputListener = document.getElementById("userEmail");
    const spreadsheetIdInput = document.getElementById("spreadsheetId");
    
    if (userEmailInputListener) {
      userEmailInputListener.addEventListener('input', function() {
        localStorage.setItem("cema_user_email", this.value);
        controlarAcessoPorEmail(this.value);
      });
    }
    
    if (spreadsheetIdInput) {
      spreadsheetIdInput.addEventListener('input', function() {
        localStorage.setItem("cema_spreadsheet_id", this.value);
      });
    }
    carregarParceiros();
    verificarTokenSalvo();
    adicionarLinha();

    // Definir m√™s atual
    const hoje = new Date();
    const mesAtual = hoje.getFullYear() + "-" + String(hoje.getMonth() + 1).padStart(2, "0");
    const mesElement = document.getElementById("mes");
    if (mesElement) {
      mesElement.value = mesAtual;
    }
    
    // Calcular valores iniciais
    setTimeout(() => {
      calcularValores();
      const emailInput = document.getElementById("userEmail");
      if (emailInput && emailInput.value) {
        controlarAcessoPorEmail(emailInput.value);
      }
    }, 100);

      // Configurar √≠cones de olho para mostrar/esconder senhas
  configurarIconesOlho();
  
  // Ativar listeners de valores dos servi√ßos
  ativarListenersValoresServicos();
  
  // Aplicar estado inicial aos links (desabilitados antes do login)
  aplicarEstadoInicialLinks();
  });

  // Fun√ß√£o para aplicar estado inicial aos links
  function aplicarEstadoInicialLinks() {
    const googleCloudLinks = document.querySelectorAll('a[href*="console.cloud.google.com"]');
    googleCloudLinks.forEach(link => {
      // Verificar se o usu√°rio est√° logado
      const isLoggedIn = accessToken && userProfile;
      if (!isLoggedIn) {
        link.classList.add('disabled');
        link.title = 'Fa√ßa login para acessar';
        // Remover o href para evitar cliques
        link.removeAttribute('href');
        link.removeAttribute('target');
      }
    });
  }

  // Fun√ß√£o para configurar os √≠cones de olho
  function configurarIconesOlho() {
    // ID da Planilha
    const olhoSpreadsheet = document.getElementById('olho-spreadsheet');
    const inputSpreadsheet = document.getElementById('spreadsheetId');
    if (olhoSpreadsheet && inputSpreadsheet) {
      olhoSpreadsheet.addEventListener('click', function () {
        if (inputSpreadsheet.type === 'password') {
          inputSpreadsheet.type = 'text';
          olhoSpreadsheet.style.opacity = 0.5; // opcional: visual feedback
        } else {
          inputSpreadsheet.type = 'password';
          olhoSpreadsheet.style.opacity = 1;
        }
      });
    }

    // E-mail Gmail
    const olhoEmail = document.getElementById('olho-email');
    const inputEmail = document.getElementById('userEmail');
    if (olhoEmail && inputEmail) {
      olhoEmail.addEventListener('click', function () {
        if (inputEmail.type === 'password') {
          inputEmail.type = 'text';
          olhoEmail.style.opacity = 0.5; // opcional: visual feedback
        } else {
          inputEmail.type = 'password';
          olhoEmail.style.opacity = 1;
        }
      });
    }
  }



  // Exportar fun√ß√µes para uso global
  window.adicionarParceiro = adicionarParceiro;
  window.removerParceiro = removerParceiro;
  window.adicionarLinha = adicionarLinha;
  window.removerLinha = removerLinha;
  window.calcularValores = calcularValores;
  window.atualizarValor = atualizarValor;
  window.enviarParaGoogleSheets = enviarParaGoogleSheets;
  window.carregarDadosGoogleSheets = carregarDadosGoogleSheets;
  window.criarPlanilhaAutomatica = criarPlanilhaAutomatica;
  window.criarCopiaPlanilhaComLimpeza = criarCopiaPlanilhaComLimpeza;
  window.exportarRelatorioCompleto = exportarRelatorioCompleto;
  window.limparTabelaServicos = limparTabelaServicos;
  window.adicionarNovoServico = adicionarNovoServico;
  window.removerServicoAdicionado = removerServicoAdicionado;
  window.iniciarLoginGmail = iniciarLoginGmail;
  window.fazerLogout = fazerLogout;
  window.verificarTokenSalvo = verificarTokenSalvo;
  window.validarCamposParceiro = validarCamposParceiro;
  window.verificarEmailAutorizado = verificarEmailAutorizado;
  window.controlarAcessoPorEmail = controlarAcessoPorEmail;
  window.obterClientIdPorEmail = obterClientIdPorEmail;
})();

